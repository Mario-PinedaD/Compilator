/* linkers.java */
/* Generated By:JavaCC: Do not edit this line. linkers.java */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;
import java.io.*;

class linkers implements linkersConstants {
    private static CodigoCPP generador;
    // Tabla de errores
    static ArrayList<String> tabla = linkersTokenManager.tablaErrores;
    static Map<String, String> declaredVariables = new HashMap<String, String>();
    static String acumulador_cpp = "";

    static ArrayList<String> casos = new ArrayList<>();

    public static void main(String[] args) throws FileNotFoundException {
        String archivo = "codigo_objeto";
        generador = new CodigoCPP("./", archivo);

        try {
            linkers link = new linkers(System.in);
            link.Programalink();

            if (!link.tabla.isEmpty()) {
                System.out.println("\u001b[31m\nErrores encontrados:\n\u001b[0m");
                for (String error : link.tabla) {
                    System.out.println(error);
                }
            } else {
                System.out.println("\u001b[32mAn\u00e1lisis exitoso\u001b[0m");
                // System.out.print(acumulador_cpp);
                compilarEjecutable("./" + archivo + ".cpp");
            }

        } catch (ParseException e) {
            System.out.println("Error de An\u00e1lisis -> " + e.getMessage());
        }
    }

    static void checkAndAddVariable(Token id, String type, int line, int column) {
        if (declaredVariables.containsKey(id.image)) {
            tabla.add("Error Sem\u00e1ntico -> Variable repetida: " + id.image + " en l\u00ednea " + line + ", columna " + column);
        } else {
            declaredVariables.put(id.image, type);
        }
    }

    static String obtenerNombreArchivo(File archivo) {
        String nombre = archivo.getName();
        int pos = nombre.lastIndexOf(".");
        return pos > 0 ? nombre.substring(0, pos) : nombre;
    }

    static void compilarEjecutable(String sourcePath) {
        String output = sourcePath.replace(".cpp", " ");
        ProcessBuilder pb = new ProcessBuilder("g++", sourcePath, "-o", output);
        try {
            Process proceso = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(proceso.getInputStream()));
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(proceso.getErrorStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            while ((line = errorReader.readLine()) !=  null) {
                System.err.println(line);
            }
            int exitCode = proceso.waitFor();
            System.out.println("GCC termin\u00f3 con el c\u00f3digo de salida: " + exitCode);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    static class CodigoCPP {
        private File file;
        public CodigoCPP(String path, String nombreFuente) {
            String fullPath = path.replaceFirst("^~", System.getProperty("user.home"));
            file = new File(fullPath + nombreFuente + ".cpp");
            limpiarBuffer();
            escribirCPP(
                "#include <iostream>\n" +
                // "#include <Windows.h>\n" +
                "using namespace std;\n" +
                "int main() {\n"
                // "\tSetConsoleOutputCP(CP_UTF8);\n"
            );
        }

        public void escribirCPP(String linea) {
            try {
                FileWriter writer = new FileWriter(file, true);
                BufferedWriter BufWriter = new BufferedWriter(writer);
                PrintWriter PrintW = new PrintWriter(BufWriter);
                PrintW.write(linea);
                PrintW.close();
                BufWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error al tratar de escribir en el archivo CPP");
            }
        }

        public void limpiarBuffer() {
            try {
                FileWriter writer = new FileWriter(file, false);
                BufferedWriter BufWriter = new BufferedWriter(writer);
                PrintWriter PrintW = new PrintWriter(BufWriter);
                PrintW.write("");
                PrintW.close();
                BufWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error al tratar de limpiar el buffer");
            }
        }
    }

    static class Parameter {
        String type;
        String name;

        public Parameter(String type, String name) {
            this.type = type;
            this.name = name;
        }

        public Parameter() {}
    }

  static final public void Programalink() throws ParseException {
    try {
      try {
        jj_consume_token(ReservadaInicio);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalSwitch:
        case CicloWhile:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
generador.escribirCPP(acumulador_cpp);
                generador.escribirCPP("\tcout << \"\\nPresiona Enter para salir...\";\n");
                generador.escribirCPP("\tcin.ignore();\n");
                generador.escribirCPP("\tcin.get();\n");
                generador.escribirCPP("\treturn 0;\n}");
      jj_consume_token(0);
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF);

        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void sentencias() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:
    case TipoDatoDecimal:
    case TipoDatoBooleano:
    case TipoDatoCadena:
    case TIpoDatoCaracter:{
      declararVariables();
      break;
      }
    case IDENTIFICADOR:{
      asignacion();
      break;
      }
    case Lectura:{
      entrada();
      break;
      }
    case Escritura:{
      salida();
      break;
      }
    case CondicionalIf:{
      condicionalIf();
      break;
      }
    case CicloWhile:{
      cicloWhile();
      break;
      }
    case CondicionalSwitch:{
      condicionalSwitch();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void verificarExistenciaVariable(Token token) throws ParseException {
if (!linkers.declaredVariables.containsKey(token.image)) {
            linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
        }
}

/**
 * Verifica la existencia de un token y obtiene su tipo.
 *
 * @param token El token que se va a verificar.
 * @return El tipo del token si existe, de lo contrario, un valor que indique que no existe.
 * @throws SomeException Si ocurre un error durante la verificación.
 */
  static final public String verificarExistenciaYObtenerTipo(Token token) throws ParseException {String tipo;
if (token.kind == linkersConstants.IDENTIFICADOR) {
            if (linkers.declaredVariables.containsKey(token.image)) {
                tipo = linkers.declaredVariables.get(token.image);
            } else {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                tipo = "error";
            }
        } else if (token.kind == linkersConstants.NUMERO) {
            tipo = "int";
        } else if (token.kind == linkersConstants.NUMERO_FLOTANTE) {
            tipo = "float";
        } else if (token.kind == linkersConstants.VERDADERO || token.kind == linkersConstants.FALSO) {
            tipo = "boolean";
        } else if (token.kind == linkersConstants.CADENA) {
            tipo = "string";
        } else if (token.kind == linkersConstants.LETRA) {
            tipo = "char";
        }
        else {
            tipo = "error";
        }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public void declararVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TipoDatoEntero:{
      VariableINT();
      break;
      }
    case TipoDatoDecimal:{
      VariableFLOAT();
      break;
      }
    case TipoDatoBooleano:{
      VariableBOOLEAN();
      break;
      }
    case TipoDatoCadena:{
      VariableCADENA();
      break;
      }
    case TIpoDatoCaracter:{
      VariableCARACTER();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
 * Este método `VariableINT` se utiliza para definir una variable de tipo entero (INT).
 * 
 * Variables locales:
 * - `Token id`: Representa el identificador del token.
 * - `int line`: Almacena el número de línea donde se encuentra la variable.
 * - `int column`: Almacena el número de columna donde se encuentra la variable.
 * - `boolean control`: Bandera de control que inicialmente está establecida en falso.
 * 
 * Este método no tiene parámetros de entrada ni valores de retorno.
 */
  static final public void VariableINT() throws ParseException {Token id, num;
    int line, column;
    String codigo_temporal = "";
    boolean control = false;
    try {
      jj_consume_token(TipoDatoEntero);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
linkers.checkAndAddVariable(id, "int", line, column);
            codigo_temporal = "\tint " + id.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          num = jj_consume_token(NUMERO);
codigo_temporal += " = " + num.image;
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
codigo_temporal += "; \n";
            acumulador_cpp += codigo_temporal;
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * * Inicializa un token para contener el identificador de la variable, y variables para almacenar los números
 * de línea y columna donde se declara la variable. Además, incluye una variable de control booleana para
  * procesamiento adicional.
 * *
 *  * Variables Locales:
 * - Token id: Representa el token identificador para la variable de punto flotante.
 * -  * - int line: Almacena el número de línea donde se declara la variable.
 * - i * - int column: Almacena el número de columna donde se declara la variable.
 * - in * - boolean control: Una bandera de control utilizada para procesamiento o validación adicional.
 */
  static final public void VariableFLOAT() throws ParseException {Token id, num;
    int line, column;
    String codigo_temporal = "";
    boolean control = false;
    try {
      jj_consume_token(TipoDatoDecimal);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
linkers.checkAndAddVariable(id, "float", line, column);
            codigo_temporal = "\tfloat " + id.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          num = jj_consume_token(NUMERO_FLOTANTE);
codigo_temporal += " = " + num.image;
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
codigo_temporal += "; \n";
            acumulador_cpp += codigo_temporal;
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * Método que maneja la declaración de variables de tipo BOOLEAN en el compilador.
 * 
 * Variables locales:
 * - Token id: Representa el identificador del token.
 * - int line: Almacena la línea del código fuente donde se encuentra la variable.
 * - int column: Almacena la columna del código fuente donde se encuentra la variable.
 * - boolean control: Bandera de control utilizada en el proceso de manejo de la variable.
 * 
 * Este método es parte del archivo de definiciones del compilador y se encarga de 
 * procesar y validar las declaraciones de variables de tipo BOOLEAN en el código fuente.
 */
  static final public void VariableBOOLEAN() throws ParseException {Token id, val = null;
    int line, column;
    String codigo_temporal;
    boolean control = false;
    try {
      jj_consume_token(TipoDatoBooleano);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
linkers.checkAndAddVariable(id, "boolean", line, column);
            codigo_temporal = "\tbool " + id.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VERDADERO:{
            val = jj_consume_token(VERDADERO);
            break;
            }
          case FALSO:{
            jj_consume_token(FALSO);
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
codigo_temporal += " = " + (val.image.equals("Verdadero") ? "true" : "false");
      jj_consume_token(DelimitadorLineaDeCodigo);
codigo_temporal += "; \n";
            acumulador_cpp += codigo_temporal;
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableCADENA() throws ParseException {Token id, value;
    int line, column;
    boolean control = false;
    String codigo_temporal;
    try {
      jj_consume_token(TipoDatoCadena);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
linkers.checkAndAddVariable(id, "string", line, column);
            codigo_temporal = "\nstring " + id.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          value = jj_consume_token(CADENA);
codigo_temporal += " = " + value.image;
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
codigo_temporal += "; \n";
            acumulador_cpp += codigo_temporal;
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void VariableCARACTER() throws ParseException {Token id, value;
    int line, column;
    boolean control = false;
    String codigo_temporal;
    try {
      jj_consume_token(TIpoDatoCaracter);
      id = jj_consume_token(IDENTIFICADOR);
line = id.beginLine;
            column = id.beginColumn;
linkers.checkAndAddVariable(id, "char", line, column);
            codigo_temporal = "\tchar" + id.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Asignacion:{
        jj_consume_token(Asignacion);
        try {
          value = jj_consume_token(LETRA);
codigo_temporal += " = " + value.image;
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(DelimitadorLineaDeCodigo);
codigo_temporal += "; \n";
            acumulador_cpp += codigo_temporal;
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * Este método representa una regla de asignación en un compilador.
 * 
 * Variables locales:
 * - `id`: Un token que representa el identificador de la variable a la que se le asignará un valor.
 * - `varType`: Una cadena que almacena el tipo de la variable. Inicialmente está vacía.
 * 
 * La implementación de este método debe definir cómo se realiza la asignación de valores a las variables,
 * incluyendo la verificación de tipos y la evaluación de la expresión.
 */
  static final public void asignacion() throws ParseException {Token id;
    String varType = "";
    String expr = "";
    try {
      id = jj_consume_token(IDENTIFICADOR);
// Verificar que la variable esté declarada
            if (!linkers.declaredVariables.containsKey(id.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                varType = linkers.declaredVariables.get(id.image);
            }
      jj_consume_token(Asignacion);
// Generar la expresión
            expr = expresion(varType);
      jj_consume_token(DelimitadorLineaDeCodigo);
// Agregar la traducción al acumulador
            String codigo_temporal = id.image + " = " + expr + ";\n";
            acumulador_cpp += "\t" + codigo_temporal;
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void entrada() throws ParseException {Token token;
    try {
      jj_consume_token(Lectura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
/**
             * Este fragmento de código consume un token del analizador léxico (lexer) en un compilador.
             * 
             * - `jj_consume_token(linkersConstants.IDENTIFICADOR)`: Esta llamada al método `jj_consume_token` 
             *   consume el siguiente token de la secuencia de entrada si coincide con el tipo de token 
             *   especificado, en este caso `linkersConstants.IDENTIFICADOR`. 
             *   Si el token no coincide, se lanzará una excepción de error de sintaxis.
             * 
             * - `Token token`: La variable `token` almacena el token consumido, que puede ser utilizado 
             *   posteriormente en el análisis sintáctico o semántico.
             */
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (!linkers.declaredVariables.containsKey(token.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico en entrada-> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            } else {
                String varType = linkers.declaredVariables.get(token.image);
                String codigo_temporal = "";

                switch (varType) {
                    case "int":
                        codigo_temporal = "\tcin >> " + token.image + "; \n";
                        break;
                    case "float":
                        codigo_temporal = "\tcin >> " + token.image + "; \n";
                        break;
                    case "boolean":
                        codigo_temporal = "\tcin >> " + token.image + "; \n";
                        break;
                    case "string":
                        codigo_temporal = "\tcin >> " + token.image + "; \n";
                        break;
                    case "character":
                        codigo_temporal = "\tcin >> " + token.image + "; \n";
                        break;
                    default:
                        linkers.tabla.add("Error Sem\u00e1ntico en entrada -> Tipo de variable no soportado: " + varType + " para la variable " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                }

                acumulador_cpp += codigo_temporal;
            }
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

/**
 * El método `salida` es un método que no recibe parámetros y devuelve un valor de tipo `void`.
 * 
 * Dentro del bloque de inicialización del método, se declaran dos variables locales:
 * - `res` 
 * 
 * El método `salida` no tiene un cuerpo de implementación definido en el código proporcionado,
 * lo que sugiere que podría estar incompleto o que su funcionalidad se define en otra parte.
 * 
 */
  static final public void salida() throws ParseException {Token token;
    String codigo_temporal = "\tcout << ";
    try {
      jj_consume_token(Escritura);
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
token = getToken(1);

            if (token.kind == linkersConstants.CADENA) {
                token = jj_consume_token(linkersConstants.CADENA);
                codigo_temporal += token.image;
            } else if (token.kind == linkersConstants.IDENTIFICADOR) {
                token = jj_consume_token(linkersConstants.IDENTIFICADOR);
                String type = linkers.verificarExistenciaYObtenerTipo(token);
                if (!type.equals("error")) {
                    codigo_temporal += token.image;
                }
            } else {
                tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en operaci\u00f3n de escritura. Se esperaba: Cadena o Identificador");
            }

            while (nextTokenIs(linkersConstants.OperacionSuma)) {
                jj_consume_token(linkersConstants.OperacionSuma);
                token = getToken(1);
                codigo_temporal += " << ";
                if (token.kind == linkersConstants.CADENA) {
                    token = jj_consume_token(linkersConstants.CADENA);
                    codigo_temporal += token.image;
                } else if (token.kind == linkersConstants.IDENTIFICADOR) {
                    token = jj_consume_token(linkersConstants.IDENTIFICADOR);
                    if (!linkers.declaredVariables.containsKey(token.image)) {
                        tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    } else {
                        codigo_temporal += token.image;
                    }
                } else {
                    tabla.add("Error Sem\u00e1ntico -> Tipo incorrecto en operaci\u00f3n de escritura. Se esperaba: Cadena o Identificador" + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                    jj_consume_token(token.kind);
                }
            }

            codigo_temporal += " << endl; \n";
            acumulador_cpp += codigo_temporal;
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(DelimitadorLineaDeCodigo);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != DelimitadorLineaDeCodigo && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalIf() throws ParseException {
    try {
if(!casos.isEmpty()){
                casos.clear();
            }
            acumulador_cpp += "\tif (";
      parteIf();
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        parteElseIf();
      }
      if (jj_2_2(2)) {
        parteElse();
      } else {
        ;
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void parteIf() throws ParseException {
    jj_consume_token(CondicionalIf);
    try {
      jj_consume_token(ParentesisAbre);
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
    condicion();
    try {
      jj_consume_token(ParentesisCierra);
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
    try {
      jj_consume_token(LlaveAbre);

    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
acumulador_cpp += ") { \n\t";
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Lectura:
      case Escritura:
      case CondicionalIf:
      case CondicionalSwitch:
      case CicloWhile:
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      sentencias();
    }
    try {
      jj_consume_token(LlaveCierra);
acumulador_cpp += "\t} \n";
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void parteElseIf() throws ParseException {Token id;
    try {
      jj_consume_token(CondicionalElse);
acumulador_cpp += "else ";
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CondicionalIf:{
        jj_consume_token(CondicionalIf);
        try {
          jj_consume_token(ParentesisAbre);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
acumulador_cpp += "if (";
        condicion();
        try {
          jj_consume_token(ParentesisCierra);
        } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        }
acumulador_cpp += ")";
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      try {
        jj_consume_token(LlaveAbre);
acumulador_cpp += " { \n";
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalSwitch:
        case CicloWhile:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
acumulador_cpp += "\t} \n";
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void parteElse() throws ParseException {String startLabel = "";
    try {
      try {
        jj_consume_token(CondicionalElse);
acumulador_cpp += " else";
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      try {
        jj_consume_token(LlaveAbre);
acumulador_cpp += " {";
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalSwitch:
        case CicloWhile:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        sentencias();
      }
      try {
        jj_consume_token(LlaveCierra);
acumulador_cpp += "\t} \n";
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void cicloWhile() throws ParseException {
    try {
      jj_consume_token(CicloWhile);
acumulador_cpp += "while (";
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      condicion();
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
acumulador_cpp += ") {\n";
      try {
        jj_consume_token(LlaveAbre);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Lectura:
        case Escritura:
        case CondicionalIf:
        case CondicionalSwitch:
        case CicloWhile:
        case TipoDatoEntero:
        case TipoDatoDecimal:
        case TipoDatoBooleano:
        case TipoDatoCadena:
        case TIpoDatoCaracter:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        sentencias();
      }

      try {
        jj_consume_token(LlaveCierra);
      } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
acumulador_cpp += "}\n";
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void condicionalSwitch() throws ParseException {Token id;
    Token num;
    try {
      jj_consume_token(CondicionalSwitch);
acumulador_cpp += "\tswitch (";
      try {
        jj_consume_token(ParentesisAbre);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      id = jj_consume_token(IDENTIFICADOR);
if (!casos.isEmpty()){
                casos.clear();
            }
            acumulador_cpp += id.image + ") {\n";
      try {
        jj_consume_token(ParentesisCierra);
      } catch (ParseException e) {
linkers.tabla.add("Error de Sintaxis -> " + e.getMessage());
      }
      jj_consume_token(LlaveAbre);
if (!linkers.declaredVariables.containsKey(id.image)) {
                linkers.tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + id.image + " en l\u00ednea " + id.beginLine + ", columna " + id.beginColumn);
            }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Caso:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        caso();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Default:{
        defaultCaso();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(LlaveCierra);
acumulador_cpp += "}\n";
    } catch (ParseException e) {
Token t;
        do {
            t = getNextToken();
        } while (t.kind != LlaveCierra && t.kind != EOF);
        tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
}

  static final public void caso() throws ParseException {Token caseValue, id;
    jj_consume_token(Caso);
    caseValue = jj_consume_token(NUMERO);
    jj_consume_token(DelimitadorCasoSwitch);
acumulador_cpp += "\tcase " + caseValue.image + ":\n";
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Lectura:
      case Escritura:
      case CondicionalIf:
      case CondicionalSwitch:
      case CicloWhile:
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      sentencias();
    }

    jj_consume_token(Break);
acumulador_cpp += "\tbreak;\n";
    jj_consume_token(DelimitadorLineaDeCodigo);
}

  static final public void defaultCaso() throws ParseException {
    jj_consume_token(Default);
    jj_consume_token(DelimitadorCasoSwitch);
acumulador_cpp += "\tdefault: \n";
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Lectura:
      case Escritura:
      case CondicionalIf:
      case CondicionalSwitch:
      case CicloWhile:
      case TipoDatoEntero:
      case TipoDatoDecimal:
      case TipoDatoBooleano:
      case TipoDatoCadena:
      case TIpoDatoCaracter:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      sentencias();
    }
}

  static final public void condicion() throws ParseException {
acumulador_cpp += "(";
    condicionSimple();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionAnd:
      case OperacionOr:
      case OperacionNot:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      operadorLogico();
acumulador_cpp += " " + token.image + "";
      condicionSimple();
    }
acumulador_cpp += ")";
}

  static final public void condicionSimple() throws ParseException {Token token1, token2;
    String type1 = "", type2 = "";
token1 = valor(); // Permitir cualquier tipo
        type1 = verificarExistenciaYObtenerTipo(token1);

        operadorRelacional();
        acumulador_cpp += " " + token.image + " ";

        token2 = valor(); // Permitir cualquier tipo
        type2 = verificarExistenciaYObtenerTipo(token2);

        // Verificar que ambos operandos sean del mismo tipo o tipos compatibles
        if (!type2.equals(type2) && !type1.equals("error") && !type2.equals("error")) {
            tabla.add("Error Sem\u00e1ntico en condici\u00f3n-> Tipos incompatibles en la condici\u00f3n: " + type1 + " y " + type2);
        }
}

  static final public String operadorRelacional() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionMayorQue:{
      opToken = jj_consume_token(OperacionMayorQue);
opStr = ">";
      break;
      }
    case OperacionMenorQue:{
      opToken = jj_consume_token(OperacionMenorQue);
opStr = "<";
      break;
      }
    case OperacionMenorOIgualQue:{
      opToken = jj_consume_token(OperacionMenorOIgualQue);
opStr = "<=";
      break;
      }
    case OperacionMayorOIgualQue:{
      opToken = jj_consume_token(OperacionMayorOIgualQue);
opStr = ">=";
      break;
      }
    case OperacionIgualdad:{
      opToken = jj_consume_token(OperacionIgualdad);
opStr = "==";
      break;
      }
    case OperacionDesigualdad:{
      opToken = jj_consume_token(OperacionDesigualdad);
opStr = "!=";
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String operadorLogico() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionAnd:{
      opToken = jj_consume_token(OperacionAnd);
opStr = "&";
      break;
      }
    case OperacionOr:{
      opToken = jj_consume_token(OperacionOr);
opStr = "|";
      break;
      }
    case OperacionNot:{
      opToken = jj_consume_token(OperacionNot);
opStr = "!";
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String operadorAritmetico() throws ParseException {Token opToken;
    String opStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OperacionSuma:{
      opToken = jj_consume_token(OperacionSuma);
opStr = "+";
      break;
      }
    case OperacionResta:{
      opToken = jj_consume_token(OperacionResta);
opStr = "-";
      break;
      }
    case OperacionMultiplicacion:{
      opToken = jj_consume_token(OperacionMultiplicacion);
opStr = "*";
      break;
      }
    case OperacionDivision:{
      opToken = jj_consume_token(OperacionDivision);
opStr = "/";
      break;
      }
    case OperacionResiduo:{
      opToken = jj_consume_token(OperacionResiduo);
opStr = "%";
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return opStr;}
    throw new Error("Missing return statement in function");
}

  static final public String expresion(String expectedType) throws ParseException {String type = expectedType;
    String expr = "";
    expr = termino(expectedType);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionSuma:
      case OperacionResta:
      case OperacionMultiplicacion:
      case OperacionDivision:
      case OperacionResiduo:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      operadorAritmetico();
Token op = token;
            String sigTerm = termino(expectedType);
            expr += " " + op.image + " " + sigTerm;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  static final public String termino(String expectedType) throws ParseException {String type = expectedType;
    String term = "";
    String factorType;
    term = factor(expectedType);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OperacionSuma:
      case OperacionResta:
      case OperacionMultiplicacion:
      case OperacionDivision:
      case OperacionResiduo:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      operadorAritmetico();
Token op = token;
            String sigFactor = factor(expectedType);
            term += " " + op.image + " " + sigFactor;
    }
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  static final public String factor(String expectedType) throws ParseException {Token token = null;
    String type = "";
    String res = ""; // Inicialización corregida

    try {
if (nextTokenIs(linkersConstants.ParentesisAbre)) {
            jj_consume_token(linkersConstants.ParentesisAbre);
            res = expresion(expectedType);
            jj_consume_token(linkersConstants.ParentesisCierra);
            type = expectedType;
        } else if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
            type = "int";
            res = token.image;
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
            type = "float";
            res = token.image;
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
            type = "boolean";
            res = token.image;
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
            type = "boolean";
            res = token.image;
        } else if(nextTokenIs(linkersConstants.CADENA)) {
            token = jj_consume_token(linkersConstants.CADENA);
            type = "string";
            res = token.image;
        } else if (nextTokenIs(linkersConstants.LETRA)) {
            token = jj_consume_token(linkersConstants.LETRA);
            type = "character";
            res = token.image;
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (linkers.declaredVariables.containsKey(token.image)) {
                type = linkers.declaredVariables.get(token.image);
                res = token.image;
            } else {
                tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
                type = "error";
            }
        }  else {
            type = "error";
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
    }
{if ("" != null) return (res != null) ? res : "Elemento no encontrado";}
    throw new Error("Missing return statement in function");
}

  static final public boolean nextTokenIs(int kind) throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == kind;}
    throw new Error("Missing return statement in function");
}

// Métodos auxiliares para detectar operadores
  static final public boolean nextTokenIsOperatorLogico() throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == linkersConstants.OperacionAnd || t.kind == linkersConstants.OperacionOr || t.kind == linkersConstants.OperacionNot;}
    throw new Error("Missing return statement in function");
}

  static final public boolean nextTokenIsOperadorAritmetico() throws ParseException {Token t;
t = getToken(1);
    {if ("" != null) return t.kind == linkersConstants.OperacionSuma || t.kind == linkersConstants.OperacionResta ||
           t.kind == linkersConstants.OperacionMultiplicacion || t.kind == linkersConstants.OperacionDivision ||
           t.kind == linkersConstants.OperacionResiduo;}
    throw new Error("Missing return statement in function");
}

  static final public Token valor() throws ParseException {Token token = null;
    try {
if (nextTokenIs(linkersConstants.NUMERO)) {
            token = jj_consume_token(linkersConstants.NUMERO);
            acumulador_cpp += token.image;
        } else if (nextTokenIs(linkersConstants.NUMERO_FLOTANTE)) {
            token = jj_consume_token(linkersConstants.NUMERO_FLOTANTE);
            acumulador_cpp += token.image;
        } else if (nextTokenIs(linkersConstants.VERDADERO)) {
            token = jj_consume_token(linkersConstants.VERDADERO);
            acumulador_cpp += "true";
        } else if (nextTokenIs(linkersConstants.FALSO)) {
            token = jj_consume_token(linkersConstants.FALSO);
            acumulador_cpp += "false";
        } else if(nextTokenIs(linkersConstants.CADENA)) {
            token = jj_consume_token(linkersConstants.CADENA);
            acumulador_cpp += token.image;
        } else if (nextTokenIs(linkersConstants.LETRA)) {
            token = jj_consume_token(linkersConstants.LETRA);
            acumulador_cpp += token.image;
        } else if (nextTokenIs(linkersConstants.IDENTIFICADOR)) {
            token = jj_consume_token(linkersConstants.IDENTIFICADOR);
            if (linkers.declaredVariables.containsKey(token.image)) {
                verificarExistenciaVariable(token);
                acumulador_cpp += token.image;
            } else {
                tabla.add("Error Sem\u00e1ntico -> Variable no declarada: " + token.image + " en l\u00ednea " + token.beginLine + ", columna " + token.beginColumn);
            }
        } else {
            tabla.add("Error Sem\u00e1ntico -> Token inesperado en la condici\u00f3n.");
            {if (true) throw new ParseException("Token inesperado en la condici\u00f3n.");}
        }
    } catch (ParseException e) {
tabla.add("Error de Sintaxis -> " + e.getMessage());
        {if (true) throw e;}
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
}

  static final public boolean esTipoCompatible(String tipo1, String tipo2) throws ParseException {
{if ("" != null) return (tipo1.equals("int") && tipo2.equals("int")) ||
             (tipo1.equals("float") && (tipo2.equals("int") || tipo2.equals("float"))) ||
             (tipo1.equals("int") && tipo2.equals("float"));}
    throw new Error("Missing return statement in function");
}

  static final public String actualizarTipoResultante(String tipo1, String tipo2) throws ParseException {String tipo;
if (tipo1.equals("float") || tipo2.equals("float")) {
        tipo = "float";
    } else if (tipo1.equals("int") && tipo2.equals("int")) {
        tipo ="int";
    } else {
        tipo = "error";
    }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public boolean verificarCompatibilidadTipos(String varType, String expr) throws ParseException {boolean compatible = false; // Variable para almacenar el resultado

// Reglas para validar compatibilidad de tipos
        if (varType.equals("int") && expr.matches("[0-9]+")) {
            compatible = true;
        } else if (varType.equals("float") && expr.matches("[0-9]+(\\.[0-9]+)?")) {
            compatible = true;
        } else if (varType.equals("int") && expr.matches("[0-9]+") && varType.equals("float") && expr.matches("[0-9]+(\\.[0-9]+)?")) {
            compatible = true;
        }else if (varType.equals("boolean") && (expr.equals("true") || expr.equals("false"))) {
            compatible = true;
        } else if (varType.equals("string") && expr.startsWith("\"") && expr.endsWith("\"")) {
            compatible = true;
        }
{if ("" != null) return compatible;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_parteElseIf_828_5_13()
 {
    if (jj_scan_token(CondicionalElse)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parteElseIf_835_13_15()) jj_scanpos = xsp;
    if (jj_scan_token(LlaveAbre)) return true;
    return false;
  }

  static private boolean jj_3R_parteElse_881_5_14()
 {
    if (jj_scan_token(CondicionalElse)) return true;
    if (jj_scan_token(LlaveAbre)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_parteElseIf_828_5_13()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_parteElse_881_5_14()) return true;
    return false;
  }

  static private boolean jj_3R_parteElseIf_835_13_15()
 {
    if (jj_scan_token(CondicionalIf)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public linkersTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xf80dc,0xf80dc,0xf8000,0x0,0x0,0x1800,0x0,0x0,0x0,0xf80dc,0x10,0xf80dc,0xf80dc,0xf80dc,0x200,0x100,0xf80dc,0xf80dc,0x0,0x0,0x0,0xe0000000,0xe0000000,0xe0000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x20000,0x20000,0x0,0x40,0x40,0x0,0x40,0x40,0x40,0x20000,0x0,0x20000,0x20000,0x20000,0x0,0x0,0x20000,0x20000,0xe000,0x1f80,0xe000,0x3,0x3,0x3,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public linkers(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public linkers(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new linkersTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public linkers(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new linkersTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new linkersTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public linkers(linkersTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(linkersTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[60];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 24; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 60; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
